# coding: utf-8

"""
    Rest DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swagger_client.models.related_entities import RelatedEntities
from typing import Optional, Set
from typing_extensions import Self

class AttributesOrderStatus(BaseModel):
    """
    AttributesOrderStatus
    """ # noqa: E501
    is_return: StrictBool
    cdek_number: StrictStr
    number: Optional[StrictStr] = None
    status_code: StrictStr
    status_reason_code: Optional[StrictStr] = None
    status_date_time: datetime
    city_name: Optional[StrictStr] = None
    city_code: Optional[StrictStr] = None
    code: StrictStr
    is_reverse: StrictBool
    is_client_return: StrictBool
    related_entities: Optional[List[RelatedEntities]] = None
    __properties: ClassVar[List[str]] = ["is_return", "cdek_number", "number", "status_code", "status_reason_code", "status_date_time", "city_name", "city_code", "code", "is_reverse", "is_client_return", "related_entities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributesOrderStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in related_entities (list)
        _items = []
        if self.related_entities:
            for _item_related_entities in self.related_entities:
                if _item_related_entities:
                    _items.append(_item_related_entities.to_dict())
            _dict['related_entities'] = _items
        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if status_reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.status_reason_code is None and "status_reason_code" in self.model_fields_set:
            _dict['status_reason_code'] = None

        # set to None if city_name (nullable) is None
        # and model_fields_set contains the field
        if self.city_name is None and "city_name" in self.model_fields_set:
            _dict['city_name'] = None

        # set to None if city_code (nullable) is None
        # and model_fields_set contains the field
        if self.city_code is None and "city_code" in self.model_fields_set:
            _dict['city_code'] = None

        # set to None if related_entities (nullable) is None
        # and model_fields_set contains the field
        if self.related_entities is None and "related_entities" in self.model_fields_set:
            _dict['related_entities'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributesOrderStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_return": obj.get("is_return"),
            "cdek_number": obj.get("cdek_number"),
            "number": obj.get("number"),
            "status_code": obj.get("status_code"),
            "status_reason_code": obj.get("status_reason_code"),
            "status_date_time": obj.get("status_date_time"),
            "city_name": obj.get("city_name"),
            "city_code": obj.get("city_code"),
            "code": obj.get("code"),
            "is_reverse": obj.get("is_reverse"),
            "is_client_return": obj.get("is_client_return"),
            "related_entities": [RelatedEntities.from_dict(_item) for _item in obj["related_entities"]] if obj.get("related_entities") is not None else None
        })
        return _obj


