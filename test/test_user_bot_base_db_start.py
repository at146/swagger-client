# coding: utf-8

"""
    Rest DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from swagger_client.models.user_bot_base_db_start import UserBotBaseDbStart

class TestUserBotBaseDbStart(unittest.TestCase):
    """UserBotBaseDbStart unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserBotBaseDbStart:
        """Test UserBotBaseDbStart
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserBotBaseDbStart`
        """
        model = UserBotBaseDbStart()
        if include_optional:
            return UserBotBaseDbStart(
                id = 56,
                user_id = 56,
                bot_token = '',
                last_mess = 56,
                items = '',
                new_user = True,
                subscribe_channel = True,
                utm_mark_id = 56,
                date_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_active = True,
                user = swagger_client.models.user_base_db.UserBaseDb(
                    id = 56, 
                    user_id = 56, 
                    first_name = '', 
                    username = '', 
                    stock = swagger_client.models.stock_base.StockBase(
                        id = '', 
                        name = '', 
                        user_id = 56, 
                        number = 56, 
                        shipment_point = '', 
                        full_name = '', 
                        phone = '', ), 
                    users_bots = [
                        swagger_client.models.user_bot_base.UserBotBase(
                            id = 56, 
                            user_id = 56, 
                            bot_token = '', 
                            last_mess = 56, 
                            items = '', 
                            new_user = True, 
                            subscribe_channel = True, 
                            utm_mark_id = 56, 
                            date_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                bot = swagger_client.models.bot_base.BotBase(
                    id = 56, 
                    token = '', 
                    full_name = '', 
                    username = '', 
                    id_bot = 56, 
                    admin_list = '', 
                    text_channel_url = '', 
                    support_url = '', 
                    channel_url = '', 
                    info_url = '', 
                    comments_url = '', 
                    allowed_updates = [
                        ''
                        ], 
                    support_username = '', 
                    is_only_original_items = True, ),
                partner = swagger_client.models.partner_base.PartnerBase(
                    id = 56, 
                    user_bot_id = 56, 
                    reserve_balance = '', 
                    card_number = '', 
                    telephone = '', 
                    full_name = '', 
                    bank_name = '', ),
                utm_mark = swagger_client.models.utm_mark_base.UtmMarkBase(
                    id = 56, 
                    name = '', 
                    affiliate_program_id = 56, ),
                orders = [
                    swagger_client.models.order_base.OrderBase(
                        id = 56, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user_bot_id = 56, 
                        buyer = '', 
                        delivery = '', 
                        address = '', 
                        phone = '', 
                        checking = True, 
                        payment_receipt = '', 
                        comment = '', 
                        partner = True, 
                        paid = True, )
                    ],
                new_user_start = True
            )
        else:
            return UserBotBaseDbStart(
                id = 56,
                user_id = 56,
                bot_token = '',
                last_mess = 56,
                new_user = True,
                subscribe_channel = True,
                is_active = True,
        )
        """

    def testUserBotBaseDbStart(self):
        """Test UserBotBaseDbStart"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
